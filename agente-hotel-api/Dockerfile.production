# Production-optimized Dockerfile for Agente Hotel API
# Multi-stage build for minimal attack surface and optimized performance

# ============================================================================
# Build Stage
# ============================================================================
FROM python:3.12-slim AS builder

WORKDIR /build

# Security: Update base packages and install build dependencies
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends \
        build-essential \
        gcc \
        pkg-config \
        curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy dependency files only (for better Docker layer caching)
COPY requirements-prod.txt pyproject.toml ./

# Install Python dependencies (production only, no dev/test dependencies)
# Use pip directly if uv is not available due to SSL issues
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements-prod.txt

# ============================================================================
# Production Stage
# ============================================================================
FROM python:3.12-slim AS production

WORKDIR /app

# Security: Update base packages and install minimal runtime dependencies
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        ffmpeg \
        espeak-ng \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && update-ca-certificates

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create non-root user with fixed UID for security and predictability
RUN addgroup --system --gid 1000 appgroup \
    && adduser --system --uid 1000 --gid 1000 --no-create-home appuser

# Copy application code with proper ownership (exclude unnecessary files)
COPY --chown=appuser:appgroup ./app ./app

# Production environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    UVICORN_WORKERS=4 \
    UVICORN_MAX_WORKERS=8 \
    ENVIRONMENT=production \
    LOG_LEVEL=INFO

# Health check with proper timeouts for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health/live || exit 1

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Production command with optimized worker configuration
CMD ["sh", "-c", "uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${UVICORN_WORKERS:-4} --access-log --no-use-colors"]

#!/bin/sh
set -eu

# Use a writable path inside the container
CFG="/tmp/generated.yml"

# Detect receivers from env
HAS_SLACK=0
if [ -n "${SLACK_WEBHOOK_URL:-}" ]; then
  HAS_SLACK=1
fi

HAS_EMAIL=0
if [ -n "${ALERT_EMAIL_TO:-}" ] && [ -n "${SMTP_HOST:-}" ] && [ -n "${SMTP_PORT:-}" ] && [ -n "${SMTP_USER:-}" ] && [ -n "${SMTP_PASSWORD:-}" ]; then
  HAS_EMAIL=1
fi

SLACK_CHANNEL="${SLACK_CHANNEL:-#alertas-agente}"
EMAIL_FROM="${ALERT_EMAIL_FROM:-alerts@example.com}"

AM_GROUP_BY=${AM_GROUP_BY:-alertname,severity}
AM_GROUP_WAIT=${AM_GROUP_WAIT:-30s}
AM_GROUP_INTERVAL=${AM_GROUP_INTERVAL:-5m}
AM_REPEAT_INTERVAL=${AM_REPEAT_INTERVAL:-3h}

# Convert comma-separated group_by into YAML inline list with quotes
GROUP_BY_INLINE=$(printf "%s" "$AM_GROUP_BY" | sed "s/[^,][^,]*/'&'/g; s/,/, /g")

# Base config
cat > "$CFG" <<EOF
# generated by entrypoint.sh
global:
  resolve_timeout: 5m

route:
  receiver: "null"
  group_by: [$GROUP_BY_INLINE]
  group_wait: $AM_GROUP_WAIT
  group_interval: $AM_GROUP_INTERVAL
  repeat_interval: $AM_REPEAT_INTERVAL
EOF

# Conditional routes
if [ "$HAS_SLACK" -eq 1 ] || [ "$HAS_EMAIL" -eq 1 ]; then
  cat >> "$CFG" <<'EOF'
  routes:
EOF
fi

if [ "$HAS_SLACK" -eq 1 ]; then
  cat >> "$CFG" <<'EOF'
    - matchers:
        - severity = critical
      receiver: slack
EOF
fi

if [ "$HAS_EMAIL" -eq 1 ]; then
  cat >> "$CFG" <<'EOF'
    - matchers:
        - severity = warning
      receiver: email
EOF
fi

# Receivers section
cat >> "$CFG" <<'EOF'
receivers:
  - name: "null"
EOF

if [ "$HAS_SLACK" -eq 1 ]; then
  cat >> "$CFG" <<EOF
  - name: slack
    slack_configs:
      - api_url: ${SLACK_WEBHOOK_URL}
        channel: "${SLACK_CHANNEL}"
        send_resolved: true
        title: "[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }}"
        text: >-
          {{ range .Alerts }}â€¢ {{ .Annotations.summary }}
          {{ .Annotations.description }}
          {{ end }}
EOF
fi

if [ "$HAS_EMAIL" -eq 1 ]; then
  cat >> "$CFG" <<EOF
  - name: email
    email_configs:
      - to: ${ALERT_EMAIL_TO}
        from: ${EMAIL_FROM}
        smarthost: ${SMTP_HOST}:${SMTP_PORT}
        auth_username: ${SMTP_USER}
        auth_password: ${SMTP_PASSWORD}
        require_tls: true
EOF
fi

# Inhibit rules to reduce noise: critical inhibits warning of same alertname
cat >> "$CFG" <<'EOF'
inhibit_rules:
  - source_matchers:
      - severity = critical
    target_matchers:
      - severity = warning
    equal: ['alertname']
EOF

echo "Using generated Alertmanager config:" >&2
echo "-----------------------------------" >&2
cat "$CFG" >&2
echo "-----------------------------------" >&2

exec /bin/alertmanager \
  --config.file="$CFG" \
  --storage.path=/tmp/alertmanager \
  --log.level=info

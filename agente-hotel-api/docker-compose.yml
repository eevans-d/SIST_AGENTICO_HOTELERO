# [PROMPT GA-01] Stack de Docker Compose para Agente Hotelero v2.1

services:
  # ----------------------------------------------------------------------------
  # SERVICIOS DEL PMS (QLOAPPS)
  # ----------------------------------------------------------------------------
  qloapps:
    image: webkul/qloapps:latest
    container_name: qloapps_pms
    profiles: ["pms"]
    environment:
      - DB_SERVER=mysql
      - DB_NAME=qloapps
      - DB_USER=qloapps
      - DB_PASSWD=${MYSQL_PASSWORD}
    networks:
      - backend_network
    volumes:
      - qloapps_data:/var/www/html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: qloapps_db
    profiles: ["pms"]
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=qloapps
      - MYSQL_USER=qloapps
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    networks:
      - backend_network
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # SERVICIOS DEL AGENTE
  # ----------------------------------------------------------------------------
  agente-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agente_hotel_api
    user: "1000:1000"
    env_file:
      - .env
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks:
      - backend_network
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    container_name: agente_db
    user: "1000:1000"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: agente_redis
    user: "1000:1000"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - backend_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # INFRAESTRUCTURA Y PROXY
  # ----------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: agente_nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - agente-api
    networks:
      - frontend_network
      - backend_network
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # STACK DE MONITORIZACIÓN
  # ----------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: agente_prometheus
    networks:
      - backend_network
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - ./docker/prometheus/alerts-extra.yml:/etc/prometheus/alerts-extra.yml:ro
      - ./docker/prometheus/recording_rules.tmpl.yml:/etc/prometheus/recording_rules.tmpl.yml:ro
      - ./docker/prometheus/prom-entrypoint.sh:/etc/prometheus/prom-entrypoint.sh:ro
      - prometheus_gen:/etc/prometheus/generated
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    entrypoint: ["/bin/sh", "/etc/prometheus/prom-entrypoint.sh"]
    env_file:
      - .env
    environment:
      - SLO_TARGET=${SLO_TARGET}
      - SLO_TRAFFIC_FLOOR=${SLO_TRAFFIC_FLOOR}
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: agente_grafana
    user: "1000:1000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      - backend_network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: agente_alertmanager
    user: "1000:1000"
    env_file:
      - .env
    networks:
      - backend_network
    volumes:
      - ./docker/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - ./docker/alertmanager/entrypoint.sh:/entrypoint.sh:ro
      - alertmanager_data:/alertmanager
    entrypoint: ["/bin/sh", "/entrypoint.sh"]
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9093/-/healthy"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # ----------------------------------------------------------------------------
  # HEALTH PINGER (mantiene frescas métricas de readiness)
  # ----------------------------------------------------------------------------
  health-pinger:
    image: busybox:latest
    container_name: agente_health_pinger
    depends_on:
      - agente-api
    networks:
      - backend_network
    environment:
      - HEALTH_URL=http://agente-api:8000/health/ready
      - INTERVAL=30
    volumes:
      - ./scripts/health-pinger.sh:/health-pinger.sh:ro
    command: ["/bin/sh", "/health-pinger.sh"]
    restart: unless-stopped

# ==============================================================================
# REDES Y VOLÚMENES
# ==============================================================================
networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge

volumes:
  qloapps_data:
  mysql_data:
  postgres_data:
  redis_data:
  prometheus_data:
  prometheus_gen:
  grafana_data:
  alertmanager_data:

version: '3.8'

services:
  # Aplicación principal
  agente-api:
    build:
      context: ..
      dockerfile: Dockerfile.production
    container_name: agente-hotel-api-prod
    restart: unless-stopped
    environment:
      - ENV=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - POSTGRES_URL=postgresql+asyncpg://agente_user:${POSTGRES_PASSWORD}@postgres-prod:5432/agente_db
      - REDIS_URL=redis://redis-prod:6379/0
      - PMS_TYPE=qloapps
      - PMS_BASE_URL=http://qloapps-prod
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - GMAIL_CREDENTIALS_JSON=${GMAIL_CREDENTIALS_JSON}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MONITORING_ENABLED=true
      - BUSINESS_INTELLIGENCE_ENABLED=true
      - ADVANCED_ALERTING_ENABLED=true
      - PERFORMANCE_MONITORING_ENABLED=true
      - HEALTH_CHECKS_ENABLED=true
      - TRACING_ENABLED=true
    ports:
      - "8000:8000"
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
      qloapps-prod:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hotel-network
    volumes:
      - /var/log/agente-hotel:/app/logs
      - /etc/ssl/certs:/etc/ssl/certs:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Base de datos principal
  postgres-prod:
    image: postgres:15-alpine
    container_name: postgres-agente-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agente_db
      - POSTGRES_USER=agente_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - /var/backups/postgres:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agente_user -d agente_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis para caché y sesiones
  redis-prod:
    image: redis:7-alpine
    container_name: redis-agente-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # QloApps PMS
  qloapps-prod:
    image: webkul/qloapps:latest
    container_name: qloapps-prod
    restart: unless-stopped
    environment:
      - DB_SERVER=mysql-qloapps-prod
      - DB_NAME=qloapps_db
      - DB_USER=qloapps_user
      - DB_PASSWD=${QLOAPPS_DB_PASSWORD}
      - PS_INSTALL_AUTO=1
      - PS_ERASE_DB=0
      - PS_DOMAIN=${QLOAPPS_DOMAIN:-localhost}
      - PS_FOLDER_ADMIN=${QLOAPPS_ADMIN_FOLDER:-admin}
      - ADMIN_MAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWD=${ADMIN_PASSWORD}
    ports:
      - "80:80"
    depends_on:
      mysql-qloapps-prod:
        condition: service_healthy
    volumes:
      - qloapps_data_prod:/var/www/html
      - /var/log/qloapps:/var/log/apache2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # MySQL para QloApps
  mysql-qloapps-prod:
    image: mysql:8.0
    container_name: mysql-qloapps-prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=qloapps_db
      - MYSQL_USER=qloapps_user
      - MYSQL_PASSWORD=${QLOAPPS_DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - /var/backups/mysql:/backups
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy
  nginx-prod:
    image: nginx:alpine
    container_name: nginx-agente-prod
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ../nginx/sites-enabled:/etc/nginx/conf.d
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - agente-api
      - qloapps-prod
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus para métricas
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: prometheus-agente-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana para dashboards
  grafana-prod:
    image: grafana/grafana:latest
    container_name: grafana-agente-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ../docker/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus-prod
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # AlertManager para alertas
  alertmanager-prod:
    image: prom/alertmanager:latest
    container_name: alertmanager-agente-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    volumes:
      - ../docker/alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager_data_prod:/alertmanager
    networks:
      - hotel-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

networks:
  hotel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  mysql_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mysql
  qloapps_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/qloapps
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/grafana
  alertmanager_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/alertmanager
# Docker Compose para testing - Puertos alternativos para evitar conflictos

services:
  # API del agente hotelero
  agente-api:
    build: .
    container_name: agente_api_test
    ports:
      - "8001:8000"  # Puerto alternativo para evitar conflicto
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - PMS_TYPE=mock
      - REDIS_URL=redis://redis:6379
      # Usar configuración mínima sin PostgreSQL para testing de audio cache
      - AUDIO_CACHE_ENABLED=true
      - AUDIO_CACHE_MAX_SIZE_MB=100
      - AUDIO_CACHE_COMPRESSION_ENABLED=true
    command: ["uvicorn", "test_main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend_network
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 15s
      timeout: 5s
      retries: 3

  # PostgreSQL para testing
  postgres:
    image: postgres:14-alpine
    container_name: postgres_test
    ports:
      - "5434:5432"  # Puerto alternativo más alto
    environment:
      - POSTGRES_DB=agente_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test123
    networks:
      - backend_network
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agente_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para testing
  redis:
    image: redis:7-alpine
    container_name: redis_test
    ports:
      - "6380:6379"  # Puerto alternativo
    command: redis-server --appendonly yes
    networks:
      - backend_network
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_test
    ports:
      - "9091:9090"  # Puerto alternativo
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend_network
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_test_data:/prometheus

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_test
    ports:
      - "3001:3000"  # Puerto alternativo
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    networks:
      - backend_network
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_test_data:
  redis_test_data:
  prometheus_test_data:
  grafana_test_data:
version: '3.8'

services:
  # ================================
  # Agente Hotelero API - Optimizado
  # ================================
  agente-api-optimized:
    build:
      context: .
      dockerfile: Dockerfile.audio-optimized
    container_name: agente-api-optimized
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Base Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # Database
      - POSTGRES_URL=postgresql+asyncpg://agente_user:agente_pass@postgres:5432/agente_db
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Audio Optimizations
      - AUDIO_ENABLED=true
      - AUDIO_CACHE_MEMORY_MB=512
      - AUDIO_COMPRESSION_ENABLED=true
      - AUDIO_CONNECTION_POOL_ENABLED=true
      - AUDIO_HEALTH_CHECK_INTERVAL=60
      - AUDIO_TIMEOUT_SECONDS=30
      - AUDIO_MAX_SIZE_MB=16
      
      # Performance Tuning
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - KEEPALIVE_TIMEOUT=5
      
      # Monitoring
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
      - METRICS_ENABLED=true
      
    volumes:
      - audio_cache:/app/cache
      - prometheus_data:/tmp/prometheus_multiproc
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend_network
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.4'

  # ================================
  # PostgreSQL - Optimizado
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-optimized
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agente_db
      - POSTGRES_USER=agente_user
      - POSTGRES_PASSWORD=agente_pass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agente_user -d agente_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ================================
  # Redis - Optimizado para Audio Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: redis-optimized
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # ================================
  # Prometheus - Métricas de Audio
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-audio
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus-audio.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_storage:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend_network
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ================================
  # Grafana - Dashboards de Audio
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-audio
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=redis-datasource,prometheus-datasource
      - GF_FEATURE_TOGGLES_ENABLE=tempoApmTable
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # ================================
  # AlertManager - Alertas de Audio
  # ================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-audio
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./docker/alertmanager/config-audio.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - backend_network
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # ================================
  # NGINX - Load Balancer Optimizado
  # ================================
  nginx:
    image: nginx:alpine
    container_name: nginx-audio-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-audio-optimized.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - agente-api-optimized
    networks:
      - frontend_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # ================================
  # Node Exporter - Métricas del Sistema
  # ================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - backend_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  audio_cache:
    driver: local
  prometheus_data:
    driver: local
  prometheus_storage:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  frontend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
# Multi-stage optimized Dockerfile for Agente Hotel API
# Goal: smaller image (~600-800MB), faster builds, safer runtime

# ---------- Builder stage ----------
FROM python:3.12-slim AS builder

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

WORKDIR /app

# System deps for building some wheels (kept only in builder)
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
       build-essential gcc g++ \
       libffi-dev libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment for dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip first
RUN pip install --upgrade pip setuptools wheel

# Install runtime dependencies (prod)
# Optional: exclude heavy audio/ML stack by default to reduce image size
ARG INCLUDE_AUDIO=false
ENV INCLUDE_AUDIO=${INCLUDE_AUDIO}
COPY requirements-prod.txt ./
RUN if [ "$INCLUDE_AUDIO" = "true" ]; then \
        echo "Installing full requirements (with audio)" && \
        pip install --no-cache-dir -r requirements-prod.txt ; \
    else \
        echo "Installing slim requirements (without audio)" && \
        grep -Ev '^(openai-whisper)(==|$)' requirements-prod.txt > /tmp/req-noaudio.txt && \
        pip install --no-cache-dir -r /tmp/req-noaudio.txt ; \
    fi

# ---------- Runtime stage ----------
FROM python:3.12-slim AS runtime

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    UVICORN_WORKERS=2 \
    PYTHONPATH=/app

WORKDIR /app

# Copy virtualenv from builder
COPY --from=builder /opt/venv /opt/venv

# Non-root user
ARG INCLUDE_AUDIO=false
ENV INCLUDE_AUDIO=${INCLUDE_AUDIO}

RUN if [ "$INCLUDE_AUDIO" = "true" ]; then \
        apt-get update && apt-get install -y --no-install-recommends ffmpeg && \
        rm -rf /var/lib/apt/lists/* ; \
    fi && \
    adduser --disabled-password --gecos '' --uid 1000 appuser \
    && chown -R appuser:appuser /app

# Copy application source (owner: appuser)
COPY --chown=appuser:appuser ./app ./app

# Lightweight healthcheck without curl using Python's stdlib
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=3 \
  CMD python -c "import urllib.request,sys; \
    url='http://localhost:8000/health/live'; \
    req=urllib.request.Request(url); \
    urllib.request.urlopen(req, timeout=4); \
    sys.exit(0)" || exit 1

USER appuser

EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]

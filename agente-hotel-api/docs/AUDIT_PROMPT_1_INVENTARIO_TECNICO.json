{
  "project_metadata": {
    "name": "SIST_AGENTICO_HOTELERO - Agente Hotel API",
    "scan_date": "2025-10-09T00:00:00Z",
    "total_files_analyzed": 193,
    "excluded_patterns": [
      "__pycache__",
      ".venv",
      "node_modules",
      ".git",
      "*.pyc",
      "htmlcov",
      ".benchmarks"
    ]
  },
  "technical_stack": {
    "languages": {
      "primary": "Python",
      "secondary": ["YAML", "Shell", "Dockerfile", "Makefile"],
      "versions": {
        "python": "3.12"
      }
    },
    "agent_frameworks": [
      {
        "name": "Rasa NLU",
        "version": "unknown (config files present)",
        "usage_context": "Natural Language Understanding para intent detection y entity extraction",
        "config_files": [
          "rasa_nlu/config.yml",
          "rasa_nlu/config_enhanced.yml",
          "rasa_nlu/domain.yml",
          "rasa_nlu/domain_enhanced.yml",
          "rasa_nlu/data/nlu.yml"
        ]
      },
      {
        "name": "Custom Orchestrator Pattern",
        "version": "internal",
        "usage_context": "Orchestrator principal (app/services/orchestrator.py) coordina flujo: mensaje→NLP→PMS→response",
        "config_files": []
      }
    ],
    "llm_providers": [
      {
        "provider": "OpenAI Whisper",
        "models_used": ["whisper (STT - Speech-to-Text)"],
        "integration_method": "sdk (openai-whisper package)"
      },
      {
        "provider": "Potential LLM Integration",
        "models_used": ["Not explicitly configured - NLP primarily via Rasa"],
        "integration_method": "custom"
      }
    ],
    "dependencies": {
      "package_manager": "Poetry",
      "lock_files": ["poetry.lock"],
      "total_dependencies": 30,
      "critical_dependencies": [
        "fastapi@0.111.0",
        "uvicorn@0.30.1",
        "sqlalchemy@2.0.31 (async)",
        "asyncpg@0.29.0",
        "redis@5.0.7",
        "pydantic@2.8.2",
        "pydantic-settings@2.3.4",
        "structlog@24.3.0",
        "python-jose@3.3.0 (JWT)",
        "httpx@0.27.0",
        "prometheus-client@0.20.0",
        "slowapi@0.1.9 (rate limiting)",
        "openai-whisper@20231117 (STT)",
        "aiohttp@3.9.0",
        "aiofiles@23.2.1",
        "pytest@8.2.2",
        "pytest-asyncio@0.23.7"
      ]
    }
  },
  "architecture": {
    "project_structure": {
      "source_directory": "app/",
      "config_directory": "docker/, rasa_nlu/, .env files",
      "data_directory": "rasa_nlu/data/, backups/",
      "tests_directory": "tests/",
      "scripts_directory": "scripts/"
    },
    "agent_components": [
      {
        "name": "Orchestrator",
        "type": "coordinator",
        "location": "app/services/orchestrator.py",
        "responsibilities": [
          "Coordinar flujo completo de mensajes",
          "Routing de intents a handlers específicos",
          "Integrar NLP Engine, PMS Adapter, Audio Processor",
          "Gestionar sesiones de usuario",
          "Aplicar business hours logic",
          "Manejo de errores y fallbacks"
        ],
        "dependencies": [
          "NLPEngine",
          "PMSAdapter",
          "AudioProcessor",
          "SessionManager",
          "LockService",
          "TemplateService",
          "MessageGateway"
        ]
      },
      {
        "name": "NLPEngine",
        "type": "specialist_nlp",
        "location": "app/services/nlp_engine.py, app/services/nlp_engine_enhanced.py",
        "responsibilities": [
          "Procesar mensajes de texto",
          "Detectar intents (15+ intents configurados)",
          "Extraer entidades (fechas, nombres, números)",
          "Detección de idioma (ES/EN/PT)",
          "Fallback a reglas básicas si Rasa falla"
        ],
        "dependencies": ["Rasa NLU"]
      },
      {
        "name": "PMSAdapter",
        "type": "integration_adapter",
        "location": "app/services/pms_adapter.py",
        "responsibilities": [
          "Integración con QloApps PMS",
          "Circuit breaker para resiliencia",
          "Cache Redis para llamadas PMS",
          "Check availability, make reservations, late checkout",
          "Métricas Prometheus para operaciones PMS"
        ],
        "dependencies": ["QloAppsClient", "Redis", "CircuitBreaker"]
      },
      {
        "name": "AudioProcessor",
        "type": "specialist_audio",
        "location": "app/services/audio_processor.py",
        "responsibilities": [
          "Transcripción de audio vía Whisper STT",
          "Text-to-Speech (TTS) para respuestas",
          "Validación y optimización de audio",
          "Cache de transcripciones"
        ],
        "dependencies": ["Whisper", "Audio optimization services"]
      },
      {
        "name": "WhatsAppClient",
        "type": "channel_adapter",
        "location": "app/services/whatsapp_client.py",
        "responsibilities": [
          "Envío de mensajes a WhatsApp Meta API",
          "Soporte para texto, audio, imágenes, location",
          "Manejo de media URLs",
          "Rate limiting"
        ],
        "dependencies": ["httpx"]
      },
      {
        "name": "SessionManager",
        "type": "state_manager",
        "location": "app/services/session_manager.py",
        "responsibilities": [
          "Gestionar sesiones conversacionales",
          "Persistencia de contexto de usuario",
          "Tracking de pending actions (late checkout, booking ID)",
          "Cleanup de sesiones expiradas"
        ],
        "dependencies": ["Redis", "PostgreSQL"]
      },
      {
        "name": "MessageGateway",
        "type": "normalizer",
        "location": "app/services/message_gateway.py",
        "responsibilities": [
          "Normalizar mensajes multi-canal a UnifiedMessage",
          "Resolver tenant dinámicamente",
          "Validación de payloads"
        ],
        "dependencies": ["DynamicTenantService"]
      },
      {
        "name": "TemplateService",
        "type": "response_generator",
        "location": "app/services/template_service.py",
        "responsibilities": [
          "Gestionar templates de respuestas",
          "18+ templates para diferentes escenarios",
          "Soporte multiidioma",
          "Formateo de respuestas con variables"
        ],
        "dependencies": []
      },
      {
        "name": "CompletePMSOrchestrator",
        "type": "specialist_orchestrator",
        "location": "app/services/pms/complete_orchestrator.py",
        "responsibilities": [
          "Orquestación avanzada de operaciones PMS",
          "Gestión de reservas complejas",
          "Confirmaciones y cancelaciones"
        ],
        "dependencies": ["PMSAdapter", "BookingConfirmationService"]
      }
    ],
    "orchestration_pattern": "Centralized Orchestrator with Specialized Agents",
    "communication_method": "Async function calls (no message queue - direct method invocation)"
  },
  "rag_infrastructure": {
    "implemented": false,
    "vector_store": null,
    "embedding_model": null,
    "data_sources": [],
    "ingestion_scripts": [],
    "retrieval_strategy": null,
    "notes": "NO RAG infrastructure detected. System uses Rasa NLU for intent detection without vector search or semantic retrieval. Future enhancement opportunity."
  },
  "data_flow": {
    "input_sources": [
      "WhatsApp webhook (app/routers/webhooks.py)",
      "Gmail webhook (potential)",
      "Admin API endpoints (app/routers/admin.py)",
      "Health checks (app/routers/health.py)"
    ],
    "processing_pipeline": [
      "1. Webhook receives message",
      "2. MessageGateway normalizes to UnifiedMessage",
      "3. Orchestrator processes message",
      "4. Audio → AudioProcessor (if audio message)",
      "5. Text → NLPEngine for intent detection",
      "6. Business hours check",
      "7. Intent handler (orchestrator.py) calls PMS/other services",
      "8. TemplateService generates response",
      "9. WhatsAppClient sends response",
      "10. SessionManager persists state"
    ],
    "output_destinations": [
      "WhatsApp Meta API",
      "Gmail (potential)",
      "Prometheus metrics (/metrics)",
      "Structured logs (stdout/files)",
      "PostgreSQL (sessions, audits)",
      "Redis (cache, locks)"
    ],
    "storage_systems": [
      "PostgreSQL (sessions, locks, tenant mapping, audit logs)",
      "Redis (cache, rate limiting, distributed locks, feature flags)",
      "MySQL (QloApps PMS data - external service)",
      "File system (backups/, audio cache)"
    ]
  },
  "automation": {
    "task_runner": "Makefile (46+ targets)",
    "available_commands": {
      "setup": [
        "make dev-setup - Copy .env.example to .env",
        "make install - Auto-detect uv/poetry/npm and install deps"
      ],
      "run": [
        "make run - Run FastAPI with uvicorn",
        "poetry run uvicorn app.main:app --reload",
        "docker-compose up (full stack)"
      ],
      "test": [
        "make test - Run all tests",
        "make test-unit - Unit tests only",
        "make test-integration - Integration tests",
        "make test-e2e - End-to-end tests",
        "pytest (via poetry)"
      ],
      "deploy": [
        "make docker-up - Start full Docker stack",
        "make docker-down - Stop containers",
        "scripts/deploy.sh - Deployment script"
      ],
      "quality": [
        "make fmt - Format with ruff + prettier",
        "make lint - Ruff linting + gitleaks",
        "make security-scan - Full security audit",
        "make security-fast - Quick trivy scan"
      ],
      "monitoring": [
        "make health - Health checks",
        "make logs - Follow container logs",
        "make backup - Backup databases",
        "make restore - Restore from backup"
      ],
      "performance": [
        "make performance-test - Performance testing",
        "make load-test - Load testing",
        "make stress-test - Stress testing"
      ],
      "resilience": [
        "make chaos-db - Database chaos testing",
        "make chaos-redis - Redis chaos testing",
        "make resilience-test - Full resilience tests"
      ],
      "governance": [
        "make preflight - Pre-deployment risk assessment",
        "make canary-diff - Canary vs baseline comparison",
        "make validate-slo-compliance - SLO validation",
        "make pre-deploy-check - Combined pre-deploy checks"
      ]
    },
    "ci_cd": {
      "platform": "GitHub Actions",
      "workflows": [
        ".github/workflows/preflight.yml - Pre-flight checks on PR",
        ".github/workflows/ci.yml (potential)",
        ".github/workflows/deploy.yml (potential)"
      ],
      "quality_gates": [
        "Linting (ruff)",
        "Security scan (gitleaks, trivy)",
        "Test coverage",
        "Preflight score >= 7.5"
      ]
    }
  },
  "observability": {
    "logging": {
      "framework": "structlog",
      "log_levels": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
      "log_destinations": [
        "stdout (JSON structured logs)",
        "File logs (if configured)",
        "Container logs (docker logs)"
      ],
      "features": [
        "Structured JSON logging",
        "Correlation IDs via middleware",
        "Automatic context injection",
        "Log levels configurable via settings"
      ]
    },
    "monitoring": {
      "tools": [
        "Prometheus (metrics collection)",
        "Grafana (visualization dashboards)",
        "AlertManager (alerting)"
      ],
      "metrics_tracked": [
        "HTTP request latency (histogram)",
        "PMS API latency (histogram)",
        "Circuit breaker state (gauge)",
        "Intent detection counts (counter)",
        "NLP fallbacks (counter)",
        "Messages by channel (counter)",
        "Cache hit/miss rates",
        "Session operations",
        "Audio processing metrics"
      ],
      "dashboards": [
        "docker/grafana/ (dashboard configurations)",
        "Prometheus at :9090",
        "Grafana at :3000"
      ],
      "alerting": [
        "docker/alertmanager/config.yml",
        "Alerts for circuit breaker open",
        "Alerts for high error rates",
        "Alerts for SLO violations"
      ]
    },
    "llm_evaluation": {
      "frameworks": [],
      "evaluation_datasets": [],
      "metrics": [],
      "notes": "NO dedicated LLM evaluation framework detected. Rasa provides intent classification metrics during training. Future enhancement opportunity for systematic LLM evaluation."
    }
  },
  "configuration_management": {
    "config_files": [
      ".env (production secrets)",
      ".env.example (template)",
      ".env.staging.example",
      ".env.test (test config)",
      "app/core/settings.py (Pydantic settings)",
      "rasa_nlu/config.yml (NLP pipeline)",
      "docker-compose.yml (services config)",
      "Makefile (automation config)",
      "pyproject.toml (dependencies)"
    ],
    "environment_variables": [
      "SECRET_KEY (JWT signing)",
      "ENVIRONMENT (production|staging|development)",
      "DEBUG (true|false)",
      "PMS_TYPE (mock|qloapps)",
      "PMS_BASE_URL, PMS_API_KEY",
      "POSTGRES_* (database config)",
      "REDIS_* (cache config)",
      "WHATSAPP_ACCESS_TOKEN, WHATSAPP_PHONE_NUMBER_ID",
      "HOTEL_* (hotel details: name, address, coordinates)",
      "BUSINESS_HOURS_* (operating hours)",
      "TTS_ENGINE (espeak|coqui)"
    ],
    "secrets_management": ".env files with SecretStr in Pydantic (NO vault integration detected)",
    "multi_environment": true,
    "environments": ["development", "staging", "production"]
  },
  "security_posture": {
    "dependency_scanning": true,
    "tools": ["trivy (vulnerabilities)", "gitleaks (secrets)"],
    "secret_detection": true,
    "code_analysis": true,
    "linters": ["ruff", "bandit (via config)", "mypy"],
    "prompt_injection_protection": false,
    "notes": "Input validation via Pydantic and bleach sanitization. No specific prompt injection detection.",
    "security_features": [
      "JWT authentication (python-jose)",
      "Rate limiting (slowapi + Redis)",
      "Security headers middleware",
      "Request size limiting",
      "CORS configuration",
      "Input sanitization (bleach)",
      "Secret validation (prevents production deploy with dummy values)"
    ]
  },
  "gaps_identified": [
    "NO RAG infrastructure - Opportunity for semantic search and knowledge retrieval",
    "NO dedicated LLM provider for generation (relies on Rasa NLU only)",
    "NO centralized secrets management (using .env files)",
    "NO prompt injection protection mechanisms",
    "NO systematic LLM evaluation framework",
    "NO observability for LLM costs/tokens",
    "Limited tracing (no OpenTelemetry or Jaeger detected)",
    "No A/B testing framework for responses",
    "No user feedback collection system"
  ],
  "unresolved_questions": [
    "¿Qué versión exacta de Rasa se está utilizando? (no especificada en pyproject.toml)",
    "¿Se utiliza algún LLM para generación de respuestas o solo templates?",
    "¿Existen planes para implementar RAG?",
    "¿Cuál es la política de retención de logs?",
    "¿Cómo se manejan los datos sensibles de huéspedes (GDPR/compliance)?",
    "¿Existe documentación de runbooks operacionales?",
    "¿Cómo se realiza el rollback en caso de deploy fallido?",
    "¿Existe monitoreo de business KPIs (conversión, satisfacción)?",
    "¿Se están usando los servicios de optimización de performance (muchos importados pero ¿activos?)?",
    "¿Cuál es el SLA objetivo del sistema?"
  ],
  "phase_detection": {
    "current_phase": "Phase E5+ (Enhanced NLP + Quick Wins Implementation)",
    "evidence": [
      "PHASE_E5_NLP_ENHANCEMENT_PLAN.md exists",
      "docs/QUICK_WINS_IMPLEMENTATION.md shows 75% progress",
      "Recent features: Location sharing, Business hours, Room photos, Late checkout (80%)",
      "Enhanced NLP with multilingual support (ES/EN/PT)",
      "Performance optimization services present"
    ],
    "completed_phases": [
      "Phase 1-4: Core infrastructure",
      "Audio optimization",
      "Multilingual support",
      "Security hardening",
      "Performance optimization"
    ],
    "pending_features": [
      "Feature 4: Late checkout (20% remaining - E2E tests + docs)",
      "Feature 5: QR codes in confirmations",
      "Feature 6: Automated review requests"
    ]
  }
}

√çNDICE ORIENTATIVO - AGENTE RECEPCIONISTA HOTELERO
Documentaci√≥n Definitiva en 5 Partes (PMS-C√©ntrico)
PARTE 1 ‚Äî ESTRATEGIA Y FUNDAMENTOS (PMS como N√∫cleo Central)
PARTE 2 ‚Äî ARQUITECTURA PMS-C√âNTRICA Y STACK OPTIMIZADO
PARTE 3 ‚Äî IMPLEMENTACI√ìN T√âCNICA PROFUNDA (PMS-Integrada)
PARTE 4 ‚Äî OPERACI√ìN SIMPLIFICADA Y USABILIDAD M√ÅXIMA
PARTE 5 ‚Äî DESPLIEGUE ACELERADO Y EVOLUCI√ìN CONTROLADA
PARTE 1/5 ‚Äî ESTRATEGIA Y FUNDAMENTOS (PMS COMO N√öCLEO CENTRAL)
1.1 VISI√ìN Y PROP√ìSITO DEL AGENTE RECEPCIONISTA
Objetivo Central
Implementar un Agente Recepcionista Hotelero inteligente 24/7 que opere exclusivamente a trav√©s del PMS como n√∫cleo central, automatizando la atenci√≥n por WhatsApp (texto/audio) y Gmail, maximizando el impacto operativo mientras minimiza el desarrollo al reutilizar las capacidades existentes del PMS.
Filosof√≠a Fundamental: PMS como "La Central"
El PMS no es solo un sistema de soporte, sino el cerebro operativo del hotel. El agente act√∫a como una capa de experiencia conversacional inteligente que:
Consulta al PMS para disponibilidad y tarifas
Verifica informaci√≥n en tiempo real
Confirma reservas directamente en el PMS
Responde bas√°ndose en la informaci√≥n del PMS
Esta arquitectura reduce dram√°ticamente el tiempo de desarrollo al evitar duplicar funcionalidades que el PMS ya incorpora (inventario, tarifas, reservas, clientes, facturaci√≥n).
1.2 ALCANCE T√âCNICO DEFINITIVO
Canales de Comunicaci√≥n (Exclusivos)
WhatsApp Business
Texto: Consultas, reservas, confirmaciones
Audio: STT (Whisper) para consultas habladas + TTS (Coqui/eSpeak-NG) para respuestas
Multimedia: Recepci√≥n de comprobantes de pago/transferencias
Horario: 24/7 automatizado con escalamiento inteligente al staff
Gmail Integration
IMAP polling o Gmail API para consultas por email
Respuestas autom√°ticas con plantillas profesionales
Adjuntos: Vouchers, confirmaciones, informaci√≥n del hotel
Threading: Conversaciones organizadas por cliente
PMS como Fuente √önica de Verdad
QloApps (Recomendaci√≥n Principal)
Sistema completo open source con API REST documentada
Manejo integral: inventario, tarifas, reservas, clientes, facturaci√≥n
Comunidad activa (2K+ GitHub stars)
Ecosistema de plugins y extensiones
HotelDruid (Alternativa Ligera)
Ideal para hoteles peque√±os-medianos
Setup m√°s simple, API b√°sica pero funcional
Licencia GPL completamente libre
Capacidades de Audio Integradas
STT (Speech-to-Text)
Whisper (OpenAI): Modelo "base" para espa√±ol, procesamiento local
Formatos soportados: OGG (WhatsApp), MP3, WAV
Pipeline: Audio WhatsApp ‚Üí FFmpeg conversi√≥n ‚Üí Whisper ‚Üí Texto
TTS (Text-to-Speech)
Coqui TTS: Voces naturales en espa√±ol (opci√≥n calidad)
eSpeak-NG: Alternativa ligera para recursos limitados
Cache inteligente: Respuestas frecuentes pre-generadas
Idioma y Contexto Profesional
Espa√±ol profesional hotelero con terminolog√≠a espec√≠fica del sector
Pol√≠ticas y reglamentos hoteleros argentinos cuando sea relevante
Tono cordial pero profesional, evitando regionalismos excesivos
Claridad universal manteniendo naturalidad en la comunicaci√≥n
1.3 ESTRATEGIA DE REDUCCI√ìN DE DESARROLLO
Principio: "PMS Maneja, Agente Comunica"
Lo que HACE el PMS (QloApps/HotelDruid):
‚úÖ Gesti√≥n completa de inventario (habitaciones, tipos, estados)
‚úÖ Motor de tarifas din√°micas y promociones
‚úÖ Sistema completo de reservas (crear, modificar, cancelar)
‚úÖ Base de datos de clientes con historial
‚úÖ Facturaci√≥n y reportes (condicional)
‚úÖ Dashboard administrativo hotelero
‚úÖ Control de ocupaci√≥n y disponibilidad en tiempo real
Lo que HACE el Agente:
ü§ñ Interfaz conversacional WhatsApp/Gmail (texto/audio)
ü§ñ Procesamiento de lenguaje natural (intents hoteleros espec√≠ficos)
ü§ñ Pipeline de audio (STT/TTS optimizado)
ü§ñ Automatizaci√≥n de respuestas basadas en datos del PMS
ü§ñ Escalamiento inteligente al staff cuando necesario
ü§ñ Recordatorios autom√°ticos (pre/post estancia)
Flujo de Integraci√≥n T√≠pico
Cliente WhatsApp: "¬øHay disponibilidad 15-17 dic para 2 personas?"
‚Üì
Agente NLP ‚Üí Intent: disponibilidad | Entidades: fechas, hu√©spedes
‚Üì
Consulta PMS API ‚Üí GET /availability?checkin=2024-12-15&checkout=2024-12-17&guests=2
‚Üì
PMS responde ‚Üí [{room_type: "doble", price: 12000, available: true}, ...]
‚Üì
Agente genera ‚Üí "S√≠, habitaci√≥n doble disponible $12,000/noche. Total $24,000. ¬øReservamos?"
1.4 PRINCIPIOS PARA DESARROLLADOR √öNICO
Modularidad y Reutilizaci√≥n Extrema: Componentes independientes (PMS Adapter, NLP Engine, Audio Pipeline, Message Gateway) con interfaces claras.
Herramientas Comunitarias que Aceleran Desarrollo: PMS pre-construido, templates de integraci√≥n, workflows pre-definidos, stacks Docker.
Automatizaci√≥n desde D√≠a 1: Scripts de despliegue, backups autom√°ticos, monitoreo b√°sico, tests esenciales.
Configuraci√≥n Declarativa: Variables de entorno, templates modificables, reglas en YAML/JSON para f√°cil replicaci√≥n.
1.5 KPIs DE IMPACTO MEDIBLE
Eficiencia Operativa
Tiempo de respuesta: < 2 minutos (objetivo: < 30 segundos)
Precisi√≥n de disponibilidad: > 98%
Reducci√≥n carga staff: > 70%
Cobertura horaria: 24/7
Conversi√≥n y Revenue
Tasa de conversi√≥n consulta ‚Üí reserva: > 25%
Tiempo consulta ‚Üí reserva: < 10 minutos
Upselling autom√°tico: Sugerencias de habitaciones superiores
Reducci√≥n no-shows: Recordatorios autom√°ticos
Calidad de Servicio
Satisfacci√≥n del cliente: NPS > 8/10
Precisi√≥n de respuestas: > 95%
Escalamiento efectivo: < 5% conversaciones requieren intervenci√≥n
Consistencia: 100%
M√©tricas T√©cnicas
Uptime del sistema: > 99.5%
Latencia de respuesta: < 3s texto, < 10s audio
Precisi√≥n STT: > 90%
Sincronizaci√≥n PMS: < 1 segundo
1.6 DECISIONES CR√çTICAS FUNDAMENTADAS
Facturaci√≥n AFIP (Decisi√≥n Condicional)
Criterio de Evaluaci√≥n:
Si complejidad ‚â§ MEDIA: Implementar usando capacidades nativas del PMS.
Si complejidad > MEDIA: Posponer para temporada de verano.
Alternativa Temporal: PMS maneja facturaci√≥n manual, agente genera pre-facturas.
Selecci√≥n de Canales (WhatsApp + Gmail √önicamente)
Justificaci√≥n Estrat√©gica: Concentraci√≥n de esfuerzos, simplicidad de desarrollo, cobertura efectiva.
Arquitectura PMS-C√©ntrica vs Agente Aut√≥nomo
Ventajas: Reducci√≥n 60-80% tiempo desarrollo, consistencia de datos, menor superficie de error, mantenimiento simplificado.
1.7 RECURSOS COMUNITARIOS IDENTIFICADOS
PMS Open Source Seleccionados
QloApps:
GitHub: https://github.com/webkul/qloapps (2K+ stars)
API: REST completa y documentada
HotelDruid:
Sitio: hoteldruid.com
Licencia: GPL completamente libre
Frameworks y Templates Identificados
Integraci√≥n WhatsApp Business: Templates pre-aprobados, librer√≠as Python.
FastAPI + Rasa Integration: Repositorios GitHub con ejemplos de chatbots hoteleros.
Docker Compose Stacks: Configuraciones completas (PMS + DB + Proxy), scripts de backup, SSL autom√°tico.
1.8 ARQUITECTURA DE ALTO NIVEL
Componentes Principales
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   WHATSAPP      ‚îÇ    ‚îÇ     GMAIL        ‚îÇ    ‚îÇ   DASHBOARD     ‚îÇ
‚îÇ (Webhook/API)   ‚îÇ    ‚îÇ   (IMAP/API)     ‚îÇ    ‚îÇ    STAFF        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          ‚îÇ                      ‚îÇ                       ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ   MESSAGE GATEWAY    ‚îÇ
          ‚îÇ  (Normalizaci√≥n)     ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                     ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ    ORQUESTADOR       ‚îÇ
          ‚îÇ   (FastAPI Core)     ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                ‚îÇ          ‚îÇ
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îê      ‚îå‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ NLP ENGINE  ‚îÇ      ‚îÇ AUDIO ENGINE ‚îÇ
    ‚îÇ(Rasa+spaCy) ‚îÇ      ‚îÇ(Whisper+TTS) ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îò      ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                ‚îÇ          ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ  BUSINESS LOGIC      ‚îÇ
          ‚îÇ (Reglas Hoteleras)   ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ   PMS ADAPTER        ‚îÇ
          ‚îÇ(QloApps/HotelDruid)  ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ       PMS            ‚îÇ
          ‚îÇ (Fuente de Verdad)   ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò


Flujo de Datos End-to-End
Entrada: Mensaje WhatsApp/Gmail ‚Üí Gateway normalizaci√≥n
Procesamiento: NLP extrae intent/entidades ‚Üí Business Logic aplica reglas
Consulta: PMS Adapter consulta/modifica datos en PMS
Respuesta: Generaci√≥n respuesta ‚Üí Env√≠o por canal apropiado
Logging: Registro completo
1.9 CRITERIOS DE √âXITO Y GO/NO-GO
Criterios GO (Listo para Producci√≥n)
‚úÖ Canales operativos: WhatsApp + Gmail sin errores.
‚úÖ Integraci√≥n PMS: Sincronizaci√≥n >98% precisi√≥n.
‚úÖ Audio funcional: >80% transcripciones √∫tiles.
‚úÖ KPIs m√≠nimos: Tiempo respuesta <2 min, uptime >99%.
‚úÖ Staff aut√≥nomo: Opera dashboard sin asistencia.
Criterios NO-GO (Requiere Correcci√≥n)
‚ùå Inconsistencias PMS: >1% discrepancias.
‚ùå Double-booking: Cualquier caso.
‚ùå Fallos canal persistentes: >30 min inaccesibles.
‚ùå Latencia sistem√°tica: Fuera de objetivo.
‚ùå Staff no puede operar: Requiere asistencia.
1.10 PR√ìXIMOS PASOS Y PREPARACI√ìN PARTE 2
Decisiones Inmediatas Requeridas
Selecci√≥n PMS definitiva: QloApps vs HotelDruid (recomendaci√≥n: QloApps)
WhatsApp API: Twilio vs Meta Cloud
Gmail: IMAP polling vs Gmail API
Hosting: VPS dedicado vs cloud managed
Preparaci√≥n T√©cnica
Instalaci√≥n PMS: Setup inicial QloApps
Entorno desarrollo: Docker, Git, Python 3.11+
Cuentas desarrollador: Meta Business, Google Cloud
Migraci√≥n datos: Preparar CSV
PARTE 2/5 ‚Äî ARQUITECTURA PMS-C√âNTRICA Y STACK TECNOL√ìGICO OPTIMIZADO
2.1 ARQUITECTURA DE INTEGRACI√ìN TOTAL CON PMS
Principio Fundamental: PMS como "La Central Operativa"
La arquitectura se fundamenta en el concepto de "PMS como Single Source of Truth". QloApps/HotelDruid act√∫a como el cerebro operativo, y el agente funciona como una capa de experiencia conversacional.
El PMS maneja TODA la l√≥gica de negocio hotelera:
‚úÖ Inventario, Motor de tarifas, Sistema de reservas, Base de datos clientes, Facturaci√≥n, Reportes.
El Agente maneja SOLO la comunicaci√≥n automatizada:
ü§ñ Canales multimodales, Procesamiento NLP, Pipeline de audio, Automatizaci√≥n conversacional, Escalamiento din√°mico.
Flujo Operacional End-to-End
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   WHATSAPP      ‚îÇ         ‚îÇ     GMAIL       ‚îÇ
‚îÇ (Audio/Texto)   ‚îÇ         ‚îÇ   (IMAP/API)    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          ‚îÇ                           ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ  MESSAGE GATEWAY    ‚îÇ ‚Üê Normalizaci√≥n unificada
         ‚îÇ ‚Ä¢ Rate Limiting     ‚îÇ
         ‚îÇ ‚Ä¢ Auth/Validation   ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ ORQUESTADOR FASTAPI ‚îÇ ‚Üê Coordinaci√≥n central
         ‚îÇ ‚Ä¢ NLP Engine        ‚îÇ
         ‚îÇ ‚Ä¢ Audio Pipeline    ‚îÇ
         ‚îÇ ‚Ä¢ Business Rules    ‚îÇ
         ‚îÇ ‚Ä¢ Session Manager   ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ   PMS ADAPTER       ‚îÇ ‚Üê Capa de abstracci√≥n
         ‚îÇ ‚Ä¢ API Integration   ‚îÇ
         ‚îÇ ‚Ä¢ Cache Layer       ‚îÇ
         ‚îÇ ‚Ä¢ Failover Logic    ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    ‚îÇ
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ  QLOAPPS (PMS)      ‚îÇ ‚Üê Fuente √∫nica de verdad
         ‚îÇ ‚Ä¢ Inventory         ‚îÇ
         ‚îÇ ‚Ä¢ Reservations      ‚îÇ
         ‚îÇ ‚Ä¢ Customers         ‚îÇ
         ‚îÇ ‚Ä¢ Billing           ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò


2.2 STACK TECNOL√ìGICO MINIMALISTA PARA DESARROLLADOR √öNICO
PMS: QloApps como N√∫cleo Central
Justificaci√≥n: API REST completa, comunidad activa, instalaci√≥n Docker, ecosistema de plugins.
Setup QloApps Optimizado:
# docker-compose.qloapps.yml
version: '3.8'
services:
  qloapps:
    image: webkul/qloapps:latest
    environment:
      DB_SERVER: mysql
      DB_NAME: qloapps
      DB_USER: qloapps
      DB_PASSWD: ${MYSQL_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - mysql
    volumes:
      - qloapps_data:/var/www/html

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: qloapps
      MYSQL_USER: qloapps
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  qloapps_data:
  mysql_data:


Backend Agente: FastAPI + Arquitectura Modular
Estructura del Proyecto Optimizada:
agente-hotel/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ routers/
‚îÇ   ‚îî‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ .env


FastAPI Core Implementation:
# app/main.py
from fastapi import FastAPI
from .routers import webhooks, admin
from .services import pms_adapter, message_gateway

app = FastAPI(title="Agente Recepcionista Hotelero", version="1.0.0")

app.include_router(webhooks.router, prefix="/webhooks", tags=["webhooks"])
app.include_router(admin.router, prefix="/admin", tags=["admin"])

@app.on_event("startup")
async def startup():
    await pms_adapter.initialize()
    await message_gateway.start()

@app.on_event("shutdown")
async def shutdown():
    await pms_adapter.close()


NLP Engine: Rasa + spaCy Especializado
Configuraci√≥n Rasa Hotelera:
# config.yml - Pipeline optimizado espa√±ol
language: es
pipeline:
  - name: WhitespaceTokenizer
  - name: RegexFeaturizer
  - name: LexicalSyntacticFeaturizer
  - name: CountVectorsFeaturizer
  - name: DIETClassifier
    epochs: 100
  - name: EntitySynonymMapper
policies:
  - name: MemoizationPolicy
  - name: RulePolicy
  - name: UnexpecTEDIntentPolicy
    max_history: 5
    epochs: 100


Intents Hoteleros Espec√≠ficos:
# domain.yml
intents:
  - check_availability
  - get_prices
  - make_reservation
  - modify_reservation
  - ask_services
  - ask_policies
entities:
  - check_in_date
  - check_out_date
  - num_guests
  - room_type


Audio Pipeline: Whisper + TTS Optimizado
STT Implementation:
# services/audio_pipeline.py
import whisper
import asyncio
from pathlib import Path

class AudioProcessor:
    def __init__(self):
        self.whisper_model = whisper.load_model("base")

    async def transcribe_whatsapp_audio(self, audio_url: str) -> dict:
        try:
            audio_file = await self._download_audio(audio_url)
            wav_file = await self._convert_to_wav(audio_file)
            result = await asyncio.to_thread(
                self.whisper_model.transcribe, str(wav_file), language="es"
            )
            # Cleanup
            return {"success": True, "text": result["text"].strip()}
        except Exception as e:
            return {"success": False, "error": str(e)}

    async def _convert_to_wav(self, input_file: Path) -> Path:
        output_file = input_file.with_suffix('.wav')
        process = await asyncio.create_subprocess_exec(
            'ffmpeg', '-i', str(input_file), '-ar', '16000', '-ac', '1', str(output_file),
            stdout=asyncio.subprocess.DEVNULL, stderr=asyncio.subprocess.PIPE
        )
        await process.communicate()
        return output_file


2.3 INTEGRACI√ìN BIDIRECCIONAL CON QLOAPPS
PMS Adapter: Capa de Abstracci√≥n Robusta
# services/pms_adapter.py
import httpx
from ..core.redis_client import redis_client

class QloAppsAdapter:
    def __init__(self):
        self.base_url = settings.PMS_BASE_URL
        self.api_key = settings.PMS_API_KEY
        self.session = None
        self.cache_ttl = 300  # 5 minutos

    async def initialize(self):
        self.session = httpx.AsyncClient(
            base_url=self.base_url,
            headers={"Authorization": f"Bearer {self.api_key}"},
            timeout=30.0
        )

    async def check_availability(self, check_in, check_out, guests=1, room_type=None) -> list:
        cache_key = f"availability:{check_in}:{check_out}:{guests}:{room_type or 'any'}"
        cached_data = await redis_client.get(cache_key)
        if cached_data:
            return json.loads(cached_data)

        # ... (l√≥gica de consulta al PMS) ...
        
        await redis_client.setex(cache_key, self.cache_ttl, json.dumps(data))
        return data

    async def create_reservation(self, reservation_data: dict) -> dict:
        # ... (l√≥gica de creaci√≥n y validaci√≥n) ...
        await self._invalidate_availability_cache(
            reservation_data["check_in"], reservation_data["check_out"]
        )
        return {"success": True, "data": booking_data}

    async def _invalidate_availability_cache(self, check_in, check_out):
        pattern = f"availability:{check_in}:*"
        keys = await redis_client.keys(pattern)
        if keys:
            await redis_client.delete(*keys)


Sistema de Tolerancia a Fallos
# services/fallback_manager.py
from enum import Enum

class SystemStatus(Enum):
    HEALTHY = "healthy"
    DEGRADED = "degraded"
    CRITICAL = "critical"

class FallbackManager:
    def __init__(self):
        self.status = SystemStatus.HEALTHY
        self.fallback_responses = {
            "availability": "Estoy consultando disponibilidad. Te respondo en unos minutos.",
            # ... m√°s respuestas
        }

    async def activate_degraded_mode(self, reason: str):
        self.status = SystemStatus.DEGRADED
        # Notificar staff, usar cache extendido, etc.

    async def get_fallback_response(self, intent: str) -> str:
        # L√≥gica para devolver respuesta de contingencia
        return self.fallback_responses.get(intent, self.fallback_responses["general"])


2.4 IMPLEMENTACI√ìN DE CANALES (WHATSAPP + GMAIL)
WhatsApp Integration: Meta Cloud API vs Twilio
Recomendaci√≥n: Meta Cloud API (Costo-Efectivo)
Implementaci√≥n WhatsApp Meta Cloud:
# services/whatsapp_client.py
import httpx

class WhatsAppMetaClient:
    def __init__(self):
        self.base_url = "[https://graph.facebook.com/v18.0](https://graph.facebook.com/v18.0)"
        self.access_token = settings.WHATSAPP_ACCESS_TOKEN
        self.phone_number_id = settings.WHATSAPP_PHONE_NUMBER_ID
    
    async def send_message(self, to: str, message: str) -> bool:
        payload = {"messaging_product": "whatsapp", "to": to, "text": {"body": message}}
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/{self.phone_number_id}/messages",
                json=payload, headers={"Authorization": f"Bearer {self.access_token}"}
            )
            return response.status_code == 200

    def parse_webhook(self, payload: dict) -> list:
        # L√≥gica para extraer mensajes del webhook de Meta
        pass


Gmail Integration: IMAP Polling (Simplicidad)
Justificaci√≥n: Configuraci√≥n simple, sin quotas, protocolo est√°ndar.
# services/gmail_client.py
import imaplib
import email

class GmailIMAPClient:
    def __init__(self):
        self.imap_server = "imap.gmail.com"
        self.username = settings.GMAIL_USERNAME
        self.password = settings.GMAIL_APP_PASSWORD
        self.connection = None

    async def poll_new_messages(self) -> list:
        if not self.connection:
            await self.connect()
        
        try:
            status, messages = self.connection.search(None, "UNSEEN")
            new_messages = []
            # ... (l√≥gica para leer y parsear emails) ...
            return new_messages
        except Exception as e:
            self.connection = None # Forzar reconexi√≥n
            return []

    async def send_response(self, to: str, subject: str, body: str):
        # ... (l√≥gica para enviar emails con SMTPlib) ...
        pass


2.5 INFRAESTRUCTURA Y CONFIGURACI√ìN COMPLETA
Docker Compose Stack Completo
# docker-compose.yml - Stack completo Agente + PMS
version: '3.8'
services:
  # PMS QloApps
  qloapps:
    # ... (configuraci√≥n de QloApps)
  mysql:
    # ... (configuraci√≥n de MySQL)

  # Agente Stack
  agente-api:
    build: .
    environment:
      # ... (variables de entorno para DB, Redis, PMS, WhatsApp, Gmail)
    ports:
      - "8000:8000"
    depends_on: [postgres, redis, qloapps]
  
  postgres:
    # ... (configuraci√≥n de PostgreSQL)
  redis:
    # ... (configuraci√≥n de Redis)

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on: [agente-api, qloapps]


Configuraci√≥n NGINX Optimizada
# nginx/nginx.conf
events { worker_connections 1024; }
http {
    upstream agente_api { server agente-api:8000; }
    upstream qloapps { server qloapps:80; }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=webhooks:10m rate=30r/m;
    
    server {
        listen 443 ssl;
        server_name tu-dominio.com;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        location /webhooks/ {
            limit_req zone=webhooks burst=10 nodelay;
            proxy_pass http://agente_api;
            # ... (headers)
        }
        
        location /pms/ {
            proxy_pass http://qloapps/;
            # ... (headers)
        }
    }
}


2.6 RECURSOS COMUNITARIOS Y HERRAMIENTAS ESPEC√çFICAS
Repositorios GitHub Identificados
QloApps: webkul/qloapps, webkul/qloapps-docker
WhatsApp: python-whatsapp-business, Templates en Meta Business Manager
Rasa: RasaHQ/rasa-hotel-assistant
Scripts de Automatizaci√≥n
Backup Automatizado:
#!/bin/bash
# scripts/backup.sh
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups"

# Backup MySQL (QloApps)
docker exec mysql mysqldump -u root -p${MYSQL_ROOT_PASSWORD} qloapps > $BACKUP_DIR/qloapps_$DATE.sql

# Backup PostgreSQL (Agente)
docker exec postgres pg_dump -U ${POSTGRES_USER} ${POSTGRES_DB} > $BACKUP_DIR/agente_$DATE.sql

echo "Backup completado"


Variables de Entorno Template
# .env.template
# PMS QloApps
MYSQL_ROOT_PASSWORD=
MYSQL_PASSWORD=
PMS_API_KEY=

# Agente Database
POSTGRES_DB=
POSTGRES_USER=
POSTGRES_PASSWORD=
REDIS_PASSWORD=

# WhatsApp Meta Cloud
WHATSAPP_ACCESS_TOKEN=
WHATSAPP_PHONE_NUMBER_ID=
WHATSAPP_VERIFY_TOKEN=

# Gmail
GMAIL_USERNAME=
GMAIL_APP_PASSWORD=

# Security
SECRET_KEY=


2.7 DECISIONES CR√çTICAS Y PR√ìXIMOS PASOS
Decisiones Tomadas para Eficiencia:
WhatsApp: Meta Cloud API
Gmail: IMAP polling
NLP: H√≠brido regex+spaCy inicial, Rasa cuando sea necesario
TTS: eSpeak-NG por defecto
Hosting: VPS dedicado inicial
Preparaci√≥n para PARTE 3:
Setup Inmediato Requerido: Instalaci√≥n QloApps, Cuentas desarrollador, VPS provisioning, Repositorio Git.
Aspectos a Profundizar en PARTE 3: Implementaci√≥n NLP, flujos de reserva, reglas de negocio, dashboard staff.
# fly.io Configuration - Agente Hotelero IA
# Generated: 2025-10-18
# Status: Production-ready
# Deploy: flyctl deploy

[app]
  # Application identifier (must be unique across Fly.io)
  name = "agente-hotel-api"
  
  # Region for primary deployment
  # Options: mia (Miami), sfo (SF), cdg (Paris), sin (Singapore), syd (Sydney), etc.
  # Choose closest to your users
  primary_region = "mia"
  
  # HTTP service (optional, for Fly Dashboard)
  console_command = "/bin/bash"

[build]
  # Dockerfile location relative to project root
  dockerfile = "agente-hotel-api/Dockerfile.production"
  
  # Build context
  context = "."
  
  # Build target (if using multi-stage Dockerfile)
  # target = "production"

[env]
  # Non-secret environment variables
  # Secrets use: flyctl secrets set KEY=VALUE
  ENVIRONMENT = "production"
  DEBUG = "false"
  LOG_LEVEL = "INFO"
  
  # Application settings
  JWT_ALGORITHM = "HS256"
  JWT_ACCESS_TOKEN_EXPIRE_MINUTES = "60"
  JWT_REFRESH_TOKEN_EXPIRE_MINUTES = "10080"
  
  # Rate limiting
  RATE_LIMIT_ENABLED = "true"
  RATE_LIMIT_MAX_REQUESTS = "120"
  RATE_LIMIT_WINDOW_SECONDS = "60"
  
  # PMS Configuration
  PMS_TYPE = "mock"
  PMS_BASE_URL = "http://localhost:8080"
  PMS_TIMEOUT = "30"
  
  # Database pooling
  DATABASE_POOL_SIZE = "20"
  DATABASE_POOL_TIMEOUT = "10"
  
  # Redis (if using Upstash or local)
  REDIS_ENABLED = "true"
  REDIS_POOL_SIZE = "10"
  
  # Audio processing
  AUDIO_PROCESSOR_ENGINE = "whisper"
  TTS_ENGINE = "espeak"
  
  # NLP settings
  NLP_CONFIDENCE_THRESHOLD = "0.7"
  NLP_FALLBACK_ENABLED = "true"
  
  # Tenancy
  TENANCY_DYNAMIC_ENABLED = "true"
  TENANCY_CACHE_TTL = "300"
  
  # Session management
  SESSION_TTL = "86400"
  
  # Monitoring
  METRICS_ENABLED = "true"
  TRACING_ENABLED = "true"

# Services definition
[[services]]
  # Protocol for communication
  protocol = "tcp"
  
  # Internal port (must match app's listening port)
  internal_port = 8000
  
  # Auto-start this service
  auto_start = true
  
  # Auto-stop when not in use
  auto_stop = true

  # Concurrency settings
  [services.concurrency]
    # Type: "connections" or "requests"
    type = "connections"
    
    # Maximum concurrent connections
    hard_limit = 100
    
    # Soft limit (graceful stop at this point)
    soft_limit = 80

  # External ports and handlers
  [[services.ports]]
    # Protocol handler
    handlers = ["http"]
    
    # Public port
    port = 80
    
    # Force HTTPS (recommended for production)
    force_https = true
    
    # HTTP version
    http_options = {version = "h2"}
    
  [[services.ports]]
    handlers = ["tls", "http"]
    port = 443
    http_options = {version = "h2"}

  # Health check configuration
  [[services.tcp_checks]]
    # Endpoint for health checks
    grace_period = "30s"
    interval = "15s"
    timeout = "10s"
    
  # HTTP-based health check (alternative/additional)
  [[services.http_checks]]
    protocol = "http"
    method = "GET"
    path = "/health/live"
    
    interval = "10s"
    timeout = "5s"
    grace_period = "20s"
    
    # Response status code that means "healthy"
    success_threshold = 1
    failure_threshold = 3

  # Process name for scaling
  [services.processes]
    app = "uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"

  # Volume mounting (if needed)
  # [[services.mounts]]
  #   source = "data"
  #   destination = "/app/data"

# Persistent volumes (storage)
# [mounts]
#   data = {size_gb = 10, encrypt = true}

# Backup configuration (optional)
[backup]
  enabled = true

# Metrics configuration
[metrics]
  port = 9090
  path = "/metrics"

# Deployment strategy
[deploy]
  # Release command (runs before deployment)
  # release_command = "python -m alembic upgrade head"
  
  # Maximum number of canary deployments
  max_concurrent_migrations = 1
  
  # Strategy: "rolling" or "immediate"
  strategy = "rolling"

# Experimental features (optional)
[experimental]
  cmd = ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
  entrypoint = []
  exec_cmd = []

# Networking
[http_service]
  internal_port = 8000
  
  # Custom domain (configure after deployment)
  # domains = ["api.example.com"]
  
  # CORS settings (configure in app)
  # auto_certify = true
  # use_acme = true

# Additional configuration
[[env]]
  # Can add region-specific overrides here
  regions = ["mia"]
  variables = {}

# Alerts (optional - Enterprise feature)
# [[alerts]]
#   type = "deployment_failure"
#   channels = ["slack"]

# End of fly.toml
# 
# Quick commands:
# - flyctl launch                    # Create app
# - flyctl secrets set KEY=VALUE     # Set secrets
# - flyctl deploy                    # Deploy app
# - flyctl logs                      # View logs
# - flyctl status                    # Check status
# - flyctl open                      # Open in browser
